from z3 import *
import time
from pwn import *

res = [0x16DBE60C, 0x487898C1, 0xEE2D55D3, 0x18D84754, 0x55C9E082, 0x47751ABE, 0x60A552E8, 0x1AE17C4D, 0xD306E0AF, 0x7C751B71, 0xE0A5C8A1, 0x1B5C0836, 0xC883DB29, 0x6980DC, 0xD30469C7, 0xFA5342, 0xE1E1B6B8, 0xD33F114F, 0xB69ADAF3, 0x11697366, 0xD2F2CEC7, 0x7341534D, 0x46E1A49F, 0x5337E65F, 0xA478DEA1, 0xEE6E084F, 0x5E83DAC7, 0x806952F3, 0xD2E17327, 0x52F293B8, 0xF32A114F, 0x1B9ADB94, 0x916E2954, 0xD3BBA55B, 0x2938CEBE, 0x25415379, 0xC6E60D54, 0xD397A4DC, 0xD386882, 0xA4FD1B71, 0xE0A5C8A1, 0x1B5C0836, 0x4883DBD3, 0x6E4754, 0xD3C9E0AF]
precomputed_table = [ 0x00, 0x00, 0x00, 0x00, 0xf7, 0xff, 0xff, 0x7f, 0xee, 0xff, 0xff, 0xff, 0xe5, 0xff, 0xff, 0x7f, 0xdc, 0xff, 0xff, 0xff, 0xd3, 0xff, 0xff, 0x7f, 0xca, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xff, 0x7f, 0xb8, 0xff, 0xff, 0xff, 0xaf, 0xff, 0xff, 0x7f, 0xa6, 0xff, 0xff, 0xff, 0x9d, 0xff, 0xff, 0x7f, 0x94, 0xff, 0xff, 0xff, 0x8b, 0xff, 0xff, 0x7f, 0x82, 0xff, 0xff, 0xff, 0x79, 0xff, 0xff, 0x7f, 0x71, 0xff, 0xff, 0xff, 0x66, 0xff, 0xff, 0x7f, 0x5f, 0xff, 0xff, 0xff, 0x54, 0xff, 0xff, 0x7f, 0x4d, 0xff, 0xff, 0xff, 0x42, 0xff, 0xff, 0x7f, 0x3b, 0xff, 0xff, 0xff, 0x30, 0xff, 0xff, 0x7f, 0x29, 0xff, 0xff, 0xff, 0x1e, 0xff, 0xff, 0x7f, 0x17, 0xff, 0xff, 0xff, 0x0c, 0xff, 0xff, 0x7f, 0x05, 0xff, 0xff, 0xff, 0xfa, 0xfe, 0xff, 0x7f, 0xf3, 0xfe, 0xff, 0xff, 0xe8, 0xfe, 0xff, 0x7f, 0xe2, 0xfe, 0xff, 0xff, 0xd5, 0xfe, 0xff, 0x7f, 0xcc, 0xfe, 0xff, 0xff, 0xc7, 0xfe, 0xff, 0x7f, 0xbe, 0xfe, 0xff, 0xff, 0xb1, 0xfe, 0xff, 0x7f, 0xa8, 0xfe, 0xff, 0xff, 0xa3, 0xfe, 0xff, 0x7f, 0x9a, 0xfe, 0xff, 0xff, 0x8d, 0xfe, 0xff, 0x7f, 0x84, 0xfe, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0x7f, 0x76, 0xfe, 0xff, 0xff, 0x69, 0xfe, 0xff, 0x7f, 0x60, 0xfe, 0xff, 0xff, 0x5b, 0xfe, 0xff, 0x7f, 0x53, 0xfe, 0xff, 0xff, 0x44, 0xfe, 0xff, 0x7f, 0x3d, 0xfe, 0xff, 0xff, 0x36, 0xfe, 0xff, 0x7f, 0x2f, 0xfe, 0xff, 0xff, 0x20, 0xfe, 0xff, 0x7f, 0x19, 0xfe, 0xff, 0xff, 0x12, 0xfe, 0xff, 0x7f, 0x0b, 0xfe, 0xff, 0xff, 0xfc, 0xfd, 0xff, 0x7f, 0xf5, 0xfd, 0xff, 0xff, 0xee, 0xfd, 0xff, 0x7f, 0xe7, 0xfd, 0xff, 0xff, 0xd8, 0xfd, 0xff, 0x7f, 0xd1, 0xfd, 0xff, 0xff, 0xca, 0xfd, 0xff, 0x7f, 0xc4, 0xfd, 0xff, 0xff, 0xb3, 0xfd, 0xff, 0x7f, 0xaa, 0xfd, 0xff, 0xff, 0xa1, 0xfd, 0xff, 0x7f, 0x98, 0xfd, 0xff, 0xff, 0x97, 0xfd, 0xff, 0x7f, 0x8e, 0xfd, 0xff, 0xff, 0x85, 0xfd, 0xff, 0x7f, 0x7c, 0xfd, 0xff, 0xff, 0x6b, 0xfd, 0xff, 0x7f, 0x62, 0xfd, 0xff, 0xff, 0x59, 0xfd, 0xff, 0x7f, 0x50, 0xfd, 0xff, 0xff, 0x4f, 0xfd, 0xff, 0x7f, 0x46, 0xfd, 0xff, 0xff, 0x3d, 0xfd, 0xff, 0x7f, 0x35, 0xfd, 0xff, 0xff, 0x22, 0xfd, 0xff, 0x7f, 0x1b, 0xfd, 0xff, 0xff, 0x10, 0xfd, 0xff, 0x7f, 0x09, 0xfd, 0xff, 0xff, 0x06, 0xfd, 0xff, 0x7f, 0xff, 0xfc, 0xff, 0xff, 0xf4, 0xfc, 0xff, 0x7f, 0xed, 0xfc, 0xff, 0xff, 0xda, 0xfc, 0xff, 0x7f, 0xd3, 0xfc, 0xff, 0xff, 0xc8, 0xfc, 0xff, 0x7f, 0xc1, 0xfc, 0xff, 0xff, 0xbe, 0xfc, 0xff, 0x7f, 0xb7, 0xfc, 0xff, 0xff, 0xac, 0xfc, 0xff, 0x7f, 0xa6, 0xfc, 0xff, 0xff, 0x91, 0xfc, 0xff, 0x7f, 0x88, 0xfc, 0xff, 0xff, 0x83, 0xfc, 0xff, 0x7f, 0x7a, 0xfc, 0xff, 0xff, 0x75, 0xfc, 0xff, 0x7f, 0x6c, 0xfc, 0xff, 0xff, 0x67, 0xfc, 0xff, 0x7f, 0x5e, 0xfc, 0xff, 0xff, 0x49, 0xfc, 0xff, 0x7f, 0x40, 0xfc, 0xff, 0xff, 0x3b, 0xfc, 0xff, 0x7f, 0x32, 0xfc, 0xff, 0xff, 0x2d, 0xfc, 0xff, 0x7f, 0x24, 0xfc, 0xff, 0xff, 0x1f, 0xfc, 0xff, 0x7f, 0x17, 0xfc, 0xff, 0xff, 0x00, 0xfc, 0xff, 0x7f, 0xf9, 0xfb, 0xff, 0xff, 0xf2, 0xfb, 0xff, 0x7f, 0xeb, 0xfb, 0xff, 0xff, 0xe4, 0xfb, 0xff, 0x7f, 0xdd, 0xfb, 0xff, 0xff, 0xd6, 0xfb, 0xff, 0x7f, 0xcf, 0xfb, 0xff, 0xff, 0xb8, 0xfb, 0xff, 0x7f, 0xb1, 0xfb, 0xff, 0xff, 0xaa, 0xfb, 0xff, 0x7f, 0xa3, 0xfb, 0xff, 0xff, 0x9c, 0xfb, 0xff, 0x7f, 0x95, 0xfb, 0xff, 0xff, 0x8e, 0xfb, 0xff, 0x7f, 0x88, 0xfb, 0xff, 0xff, 0x7f, 0xfb, 0xff, 0x7f, 0x66, 0xfb, 0xff, 0xff, 0x6d, 0xfb, 0xff, 0x7f, 0x54, 0xfb, 0xff, 0xff, 0x5b, 0xfb, 0xff, 0x7f, 0x42, 0xfb, 0xff, 0xff, 0x49, 0xfb, 0xff, 0x7f, 0x30, 0xfb, 0xff, 0xff, 0x27, 0xfb, 0xff, 0x7f, 0x2e, 0xfb, 0xff, 0xff, 0x15, 0xfb, 0xff, 0x7f, 0x1c, 0xfb, 0xff, 0xff, 0x03, 0xfb, 0xff, 0x7f, 0x0a, 0xfb, 0xff, 0xff, 0xf1, 0xfa, 0xff, 0x7f, 0xf9, 0xfa, 0xff, 0xff, 0xee, 0xfa, 0xff, 0x7f, 0xd7, 0xfa, 0xff, 0xff, 0xdc, 0xfa, 0xff, 0x7f, 0xc5, 0xfa, 0xff, 0xff, 0xca, 0xfa, 0xff, 0x7f, 0xb3, 0xfa, 0xff, 0xff, 0xb8, 0xfa, 0xff, 0x7f, 0xa1, 0xfa, 0xff, 0xff, 0x96, 0xfa, 0xff, 0x7f, 0x9f, 0xfa, 0xff, 0xff, 0x84, 0xfa, 0xff, 0x7f, 0x8d, 0xfa, 0xff, 0xff, 0x72, 0xfa, 0xff, 0x7f, 0x7b, 0xfa, 0xff, 0xff, 0x60, 0xfa, 0xff, 0x7f, 0x6a, 0xfa, 0xff, 0xff, 0x5d, 0xfa, 0xff, 0x7f, 0x44, 0xfa, 0xff, 0xff, 0x4f, 0xfa, 0xff, 0x7f, 0x36, 0xfa, 0xff, 0xff, 0x39, 0xfa, 0xff, 0x7f, 0x20, 0xfa, 0xff, 0xff, 0x2b, 0xfa, 0xff, 0x7f, 0x12, 0xfa, 0xff, 0xff, 0x05, 0xfa, 0xff, 0x7f, 0x0c, 0xfa, 0xff, 0xff, 0xf7, 0xf9, 0xff, 0x7f, 0xfe, 0xf9, 0xff, 0xff, 0xe1, 0xf9, 0xff, 0x7f, 0xe8, 0xf9, 0xff, 0xff, 0xd3, 0xf9, 0xff, 0x7f, 0xdb, 0xf9, 0xff, 0xff, 0xcc, 0xf9, 0xff, 0x7f, 0xb5, 0xf9, 0xff, 0xff, 0xbe, 0xf9, 0xff, 0x7f, 0xa7, 0xf9, 0xff, 0xff, 0xa8, 0xf9, 0xff, 0x7f, 0x91, 0xf9, 0xff, 0xff, 0x9a, 0xf9, 0xff, 0x7f, 0x83, 0xf9, 0xff, 0xff, 0x74, 0xf9, 0xff, 0x7f, 0x7d, 0xf9, 0xff, 0xff, 0x66, 0xf9, 0xff, 0x7f, 0x6f, 0xf9, 0xff, 0xff, 0x50, 0xf9, 0xff, 0x7f, 0x59, 0xf9, 0xff, 0xff, 0x42, 0xf9, 0xff, 0x7f, 0x4c, 0xf9, 0xff, 0xff, 0x3b, 0xf9, 0xff, 0x7f, 0x22, 0xf9, 0xff, 0xff, 0x29, 0xf9, 0xff, 0x7f, 0x10, 0xf9, 0xff, 0xff, 0x1f, 0xf9, 0xff, 0x7f, 0x06, 0xf9, 0xff, 0xff, 0x0d, 0xf9, 0xff, 0x7f, 0xf4, 0xf8, 0xff, 0xff, 0xe3, 0xf8, 0xff, 0x7f, 0xea, 0xf8, 0xff, 0xff, 0xd1, 0xf8, 0xff, 0x7f, 0xd8, 0xf8, 0xff, 0xff, 0xc7, 0xf8, 0xff, 0x7f, 0xce, 0xf8, 0xff, 0xff, 0xb5, 0xf8, 0xff, 0x7f, 0xbd, 0xf8, 0xff, 0xff, 0xaa, 0xf8, 0xff, 0x7f, 0x93, 0xf8, 0xff, 0xff, 0x98, 0xf8, 0xff, 0x7f, 0x81, 0xf8, 0xff, 0xff, 0x8e, 0xf8, 0xff, 0x7f, 0x77, 0xf8, 0xff, 0xff, 0x7c, 0xf8, 0xff, 0x7f, 0x65, 0xf8, 0xff, 0xff, 0x52, 0xf8, 0xff, 0x7f, 0x5b, 0xf8, 0xff, 0xff, 0x40, 0xf8, 0xff, 0x7f, 0x49, 0xf8, 0xff, 0xff, 0x36, 0xf8, 0xff, 0x7f, 0x3f, 0xf8, 0xff, 0xff, 0x24, 0xf8, 0xff, 0x7f, 0x2e, 0xf8, 0xff, 0xff, 0x19, 0xf8, 0xff, 0x7f, 0x00, 0xf8, 0xff, 0xff, 0x0b, 0xf8, 0xff, 0x7f, 0xf2, 0xf7, 0xff, 0xff, 0xfd, 0xf7, 0xff, 0x7f, 0xe4, 0xf7, 0xff, 0xff, 0xef, 0xf7, 0xff, 0x7f, 0xd6, 0xf7, 0xff, 0xff, 0xc1, 0xf7, 0xff, 0x7f, 0xc8, 0xf7, 0xff, 0xff, 0xb3, 0xf7, 0xff, 0x7f, 0xba, 0xf7, 0xff, 0xff, 0xa5, 0xf7, 0xff, 0x7f, 0xac, 0xf7, 0xff, 0xff, 0x97, 0xf7, 0xff, 0x7f, 0x9f, 0xf7, 0xff, 0xff, 0x88, 0xf7, 0xff, 0x7f, 0x71, 0xf7, 0xff, 0xff, 0x7a, 0xf7, 0xff, 0x7f, 0x63, 0xf7, 0xff, 0xff, 0x6c, 0xf7, 0xff, 0x7f, 0x55, 0xf7, 0xff, 0xff, 0x5e, 0xf7, 0xff, 0x7f, 0x47, 0xf7, 0xff, 0xff, 0x30, 0xf7, 0xff, 0x7f, 0x39, 0xf7, 0xff, 0xff, 0x22, 0xf7, 0xff, 0x7f, 0x2b, 0xf7, 0xff, 0xff, 0x14, 0xf7, 0xff, 0x7f, 0x1d, 0xf7, 0xff, 0xff ]

combined_list = []
for i in range(0, len(precomputed_table), 4):
    combined_bytes = bytes(precomputed_table[i:i+4])  # Take 4 bytes at a time
    combined_int = u32(combined_bytes)  # Unpack bytes into an integer
    combined_list.append(combined_int)

precomputed_table = combined_list

def access_precomputed_table_internal(idx, start):
    if(start == len(precomputed_table)): return BitVecVal(0, 32)
    #return z3.If(start == len(precomputed_table), BitVecVal(0, 32), z3.If(idx == start, BitVecVal(precomputed_table[start], 32), access_precomputed_table_internal(idx, start+1)))
    return z3.If(idx == start, BitVecVal(precomputed_table[start], 32), access_precomputed_table_internal(idx, start+1))

def access_precomputed_table(idx):
    return access_precomputed_table_internal(idx, 0)

def xhash(str, rounds):
    i = rounds
    retval = BitVecVal(0, 32)
    j = 0
    while(i != 0):
        index = (str[j] ^ (z3.LShR(retval, 0x18) & 0xFF))
        retval = retval << 8 ^ access_precomputed_table(index)
        j += 1
        i -= 1
    return retval

# def check(flag):
#     i = 0
#     while True:
#         _len = len(flag)
#         if(i >= _len - 4): 
#             if i==45:
#                 print('Wrong')
#                 return 1
#             else:
#                 print('Ok')
#                 return 0
#         _len = len(flag[i:])

#         rounds = 0
#         if(_len < 5):
#             rounds = _len
#         else:
#             rounds = 4

#         _hash = xhash(flag[i:], rounds)

#         if(_hash != res[i]): return 0
#         i += 1

def check(flag, i):
    _len = len(flag)
    if(i >= _len - 4):
        if i == 45:
            return BitVecVal(1, 32)
        else: 
            return BitVecVal(0, 32)
    _len = len(flag[i:])

    rounds = 0
    if(_len < 5):
        rounds = _len
    else:
        rounds = 4

    _hash = xhash(flag[i:], rounds)
    return z3.If(_hash != res[i], BitVecVal(0, 32), check(flag, i + 1))

strlen = 49

s = Solver()

flag = [BitVec("flag%d" % i, 32) for i in range(strlen)]

# Constratints on the string
for i in flag:
	s.add(i >= 0x41, i <= 0x7f) # Only Printable Characters

s.add(flag[0] == ord('f'))
s.add(flag[1] == ord('l'))
s.add(flag[2] == ord('a'))
s.add(flag[3] == ord('g'))
s.add(flag[4] == ord('{'))
s.add(flag[strlen-1] == ord('}'))

# Constraints from Ghidra
s.add(check(flag, 0) == 1)

print(s.check())
m = s.model()
# print(m)

flag_str = ''
for i in range(strlen):
	flag_str += chr(m[flag[i]].as_long())

print('Flag:', flag_str)

